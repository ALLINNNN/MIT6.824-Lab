package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import "sync"
import "labrpc"

// import "bytes"
// import "labgob"

import (
    "fmt"
    "time"
    "math/rand"
    "strconv"
)


//
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in Lab 3 you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh; at that point you can add fields to
// ApplyMsg, but set CommandValid to false for these other uses.
//
type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int
}

type LogEntry struct {
    entry           string
    termEntry       int
}

//
// A Go object implementing a single Raft peer.
//
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

    /*Persistent state on all servers*/
    currentTerm int
    votedFor    string             //candidateId that received vote in current term(or null if none)
    log         []LogEntry

    /*Volatile state on all servers*/
    commitIndex int
    lastApplied int

    /*Volatile state on leaders*/
    nextIndex   []int
    matchIndex  []int

    voteDone chan bool
    role        int                //0: follower, 1: candidate, 2: leader
}

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {

	var term int
	var isleader bool
	// Your code here (2A).
    term = rf.currentTerm
    s, _ := strconv.Atoi(rf.votedFor)
    fmt.Printf("GetState, rf.votedFor = %v\n", s)
    if rf.me == s {
        isleader = true
    } else {
        isleader = false
    }
	return term, isleader
}


//
// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	// w := new(bytes.Buffer)
	// e := labgob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// data := w.Bytes()
	// rf.persister.SaveRaftState(data)
}


//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	// r := bytes.NewBuffer(data)
	// d := labgob.NewDecoder(r)
	// var xxx
	// var yyy
	// if d.Decode(&xxx) != nil ||
	//    d.Decode(&yyy) != nil {
	//   error...
	// } else {
	//   rf.xxx = xxx
	//   rf.yyy = yyy
	// }
}




//
// example RequestVote RPC arguments structure.
// field names must start with capital letters!
//
type RequestVoteArgs struct {
	// Your data here (2A, 2B).
    Term            int
    CandidateId     int
    LastLogIndex    int
    LastLogTerm     int
}

//
// example RequestVote RPC reply structure.
// field names must start with capital letters!
//
type RequestVoteReply struct {
	// Your data here (2A).
    Term        int
    VoteGranted bool
}

type RpcReply struct {
    Reply       *RequestVoteReply
    ExecutedId  int
    Result      bool
}

//
// example RequestVote RPC handler.
//
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).
    fmt.Printf("Receive a vote request\n")
    if args.Term < rf.currentTerm {
        reply.Term = rf.currentTerm
        reply.VoteGranted = false
    }
    s, _ := strconv.Atoi(rf.votedFor)
    if s ==  args.CandidateId || rf.votedFor == "" {
        fmt.Printf("rf.votedFor = %v\n", rf.votedFor)
        reply.Term = args.Term
        if rf.commitIndex <= args.LastLogIndex {
            reply.VoteGranted = true
        } else {
            fmt.Printf("rf.commitIndex > args.LastLogIndex, return false\n")
            reply.VoteGranted = false
        }
    } else {
        fmt.Printf("current voter has voted to other candidate\n")
    }
    go func(){
        rf.voteDone <- true
    }()
}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply) bool {
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)
	return ok
}


//
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	// Your code here (2B).


	return index, term, isLeader
}

//
// the tester calls Kill() when a Raft instance won't
// be needed again. you are not required to do anything
// in Kill(), but it might be convenient to (for example)
// turn off debug output from this instance.
//
func (rf *Raft) Kill() {
	// Your code here, if desired.
}

//
// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
//
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here (2A, 2B, 2C).

	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())

    rf.voteDone = make(chan bool)

    fmt.Printf("me = %v\n", me)
    fmt.Printf("server handler\n")
    go serverHandler(rf)
    fmt.Printf("create goroutine, program continue\n")

	return rf
}

type Candidate struct {
    numberOfVotes   int
    flagRpcCalled   []bool
}

func serverHandler (rf *Raft) {

    var numberOfVotes int
    rpcReplyChan := make(chan RpcReply)
    flagRpcCalled := make([]bool, 0)
    for {

        switch rf.role {
            /*Current server is follower*/
            case 0:
                fmt.Printf("Follower stage start......\n")
                timeout := GetRandamNumber(800, 1000)
                fmt.Printf("timeout = %v\n", timeout)
                timer := time.NewTimer(time.Duration(timeout) * time.Millisecond)
                defer timer.Stop()

                select {
                    case <- timer.C:
                        fmt.Printf("Get timer.C channel, time out\n")
                        rf.mu.Lock()
                        rf.role = 1
                        rf.mu.Unlock()

                        numberOfVotes = 0       //the number of votes should be set to 0 once a follower transist to candidate
                        flagRpcCalled = make([]bool, len(rf.peers))
/*                        for i := 0; i < range(rf.peers); i++ {
                            flagRpcCalled = append(flagRpcCalled, false)
                        }
*/
                    case <- rf.voteDone:
                        /*current follower get a vote request, reset the timer*/
                        timer.Reset(time.Duration(timeout) * time.Millisecond)
                }
                fmt.Printf("Follower stage end......\n")

            /*Current server is candidate*/
            case 1:
                fmt.Printf("Candidate stage start......\n")
                rf.mu.Lock()
                rf.currentTerm++
                rf.votedFor = strconv.Itoa(rf.me)
                rf.mu.Unlock()
                numberOfVotes++     //the vote of candidate itself

                ExitCandidate:
                for i := 0; ; i++ {

                    select {
                        case rpcResult := <-rpcReplyChan:
                            if rpcResult.Result == true {           //previous rpc call succeed
                                if rpcResult.Reply.VoteGranted == true {
                                    fmt.Printf("server = %v voted a granted vote to candiate server = %v\n", rpcResult.ExecutedId, rf.me)
                                    numberOfVotes++
                                } else {
                                    fmt.Printf("server = %v did not allow candiate server = %v become a leader\n", rpcResult.ExecutedId, rf.me)
                                }

                                /*All server has reply the result of vote*/
                                if IsFlagAllTrue(flagRpcCalled) == true {
                                    if IsGetMajorVote(numberOfVotes, len(rf.peers)) {
                                        fmt.Printf("Current candidate get majority votes\n")
                                        rf.mu.Lock()
                                        rf.role = 2
                                        rf.mu.Unlock()
                                    } else {
                                        fmt.Printf("Current candidate get less votes\n")
                                        rf.mu.Lock()
                                        rf.role = 0
                                        rf.mu.Unlock()
                                    }
                                    break ExitCandidate         //stage of candidate has finished, jump out it
                                }
                                fmt.Printf("rpc call succeed\n")
                            } else {                            //previous rpc call failure
                                /**/
                                flagRpcCalled[rpcResult.ExecutedId] = false
                                fmt.Printf("rpc call failure\n")
                            }
                        default:
                            fmt.Printf("default select......\n")
                    }

                    if i >= len(rf.peers) {
                        i = 0
                    }

                    if i == rf.me {
                        fmt.Printf("the guy to vote to is me, skip this round\n")
                        continue
                    }

                    if flagRpcCalled[i] == true {
                        fmt.Printf("server = %v rpc call has handed out, skip current loop\n", i)
                        continue
                    } else {
                        fmt.Printf("server = %v rpc call\n", i)
                        flagRpcCalled[i] = true
                    }

                    var args *RequestVoteArgs
                    var reply *RequestVoteReply

                    fmt.Printf("addr of args = %v\n", args)
                    fmt.Printf("addr of reply = %v\n", reply)

                    args.Term = rf.currentTerm
                    args.CandidateId = rf.me
                    args.LastLogIndex = rf.commitIndex
                    args.LastLogTerm = rf.log[rf.lastApplied].termEntry

                    go func(server int, args *RequestVoteArgs, reply *RequestVoteReply, rpcReplyChan chan RpcReply){

                        fmt.Printf("rpc executedId = %v, send rpc request start......\n", server)
                        err := rf.sendRequestVote(server, args, reply)
                        fmt.Printf("rpc executedId = %v, send rpc request end, result = %v......\n", server, err)

                        fmt.Printf("rpc executedId = %v, rpcReplyChan sned", server)
                        rpcReplyChan <- RpcReply{reply, server, err}
                        fmt.Printf("rpc executedId = %v, rpcReplyChan sned over", server)

                    }(i, args, reply, rpcReplyChan)
                }
                fmt.Printf("Candidate stage end......\n")

            /*Current server is leader*/
            case 2:
                fmt.Printf("I am a leader now\n")
        }
    }
}

func GetRandamNumber(min, max int) int {

    rand.Seed(time.Now().UnixNano())
    randNum := rand.Intn(max - min) + min
    return randNum
}

func IsFlagAllTrue(flag []bool) bool {
    for _, f := range flag {
        if f == false {
            return false
        }
    }
    return true
}

func IsGetMajorVote(numberOfVote, total int) bool {
    if total / 2 >= numberOfVote {
        return true
    } else {
        return false
    }

}
