package main

import (
    "os"
    "fmt"
    "mapreduce"
    "strings"
    "unicode"
    "strconv"
    "sort"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).

    f := func(c rune) bool {
        return !unicode.IsLetter(c) && !unicode.IsNumber(c)
    }
    temp := strings.FieldsFunc(value, f)

    var kvs []mapreduce.KeyValue
    tempLen := len(temp)
    fmt.Printf("temp length = %v\n", tempLen)
    for i := 0; i < tempLen; i++ {
        var kv mapreduce.KeyValue
        kv.Key = temp[i]
        kv.Value = document
        kvs = append(kvs, kv)
    }
    return kvs
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// Your code here (Part V).

    var resultStrings string
    valuesLen := len(values)

//    fmt.Printf("values = \n%v\n", values)
//    fmt.Printf("Before sorting temp, temp = %v\n", values)
    sort.Strings(values)
//    fmt.Printf("After sorting temp, temp = %v\n", values)

    temp := make([]string, 0)

    for i := 0; i < valuesLen - 1; i++ {
        if strings.Compare(values[i], values[i+1]) == 0 {
            continue
        } else {
            temp = append(temp, values[i])
        }
    }
    temp = append(temp, values[len(values) - 1])
//    fmt.Printf("After deleting redundant values, temp = %v\n", temp)

    tempLen := len(temp)
    for i := 0; i < tempLen; i++ {
        resultStrings += temp[i]
        if i + 1 < tempLen {
            resultStrings += ","
        }
    }
//    fmt.Printf("resultStrings = %v\n", resultStrings)
    finalStrings := strconv.Itoa(tempLen)
    finalStrings += " "
//    fmt.Printf("Before jointing resultStrings, finalStrings = %v\n", finalStrings)
    finalStrings += resultStrings
//    fmt.Printf("After jointing resultStrings, finalStrings = %v\n", finalStrings)

    return finalStrings
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
